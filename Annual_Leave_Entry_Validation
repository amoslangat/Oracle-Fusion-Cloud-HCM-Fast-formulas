/*
****************************************************************************************************
 Formula Name   : Annual Leave Entry Validation
 Formula Type   : Global Absence Entry Validation
 
 Description    :
Author          : Amos Langat
Date            : 16-Jun-2024
 Last update on : 
*******************************************************************************************************/ 

DEFAULT_DATA_VALUE FOR anc_per_abs_entrs_absence_entry_id_arr IS 0

DEFAULT FOR acp_hire_date                     IS '1951/01/01 00:00:00' (date)
DEFAULT FOR acp_termination_date              IS '4712/12/31 00:00:00' (date)
DEFAULT FOR asg_hr_asg_id                     IS 0
DEFAULT FOR anc_abs_entrs_absence_type_id     IS -1
DEFAULT FOR anc_abs_entrs_duration            IS 0
DEFAULT FOR anc_abs_entrs_absence_status_cd   IS 'zz'
DEFAULT FOR anc_abs_entrs_approval_status_cd  IS 'zz'
DEFAULT FOR anc_abs_entrs_start_date          IS '0001/01/01 00:00:00' (date)
DEFAULT FOR anc_abs_entrs_end_date            IS '4712/12/31 00:00:00' (date)
DEFAULT FOR anc_abs_entrs_absence_type_id     IS 0 
DEFAULT FOR anc_abs_entrs_start_date_duration IS 0
DEFAULT FOR anc_abs_entrs_end_date_duration   IS 0
DEFAULT FOR per_asg_date_probation_end        IS '1951/01/01 00:00:00' (date)
DEFAULT FOR PER_ASG_ATTRIBUTE11               IS 'N'
DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE        IS '4712/12/31 00:00:00'(date)
DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE        IS '4712/12/31 00:00:00'(date)


Inputs ARE iv_start_date          (date),
           iv_end_date            (date),
		   iv_totalduration,
		   iv_logged_in_user_role (text)

for_name = '[ALDAR Annual Leave Entry Validation] --> '		   
		   
valid          = 'Y'
l_hire         = acp_hire_date
l_termin_date  = acp_termination_date
prd_start      = TO_DATE('1951/01/01','yyyy/MM/dd')
prd_end        = TO_DATE('4712/12/31','yyyy/MM/dd')
l_ab_id        = GET_CONTEXT(ABSENCE_TYPE_ID,0)
l_ab_entry_id  = GET_CONTEXT(ABSENCE_ENTRY_ID,0)
l_per_id       = GET_CONTEXT(PERSON_ID,0)
l_hr_id        = asg_hr_asg_id
l_plan_name    = 'Annual Leave'
l_abs_val      = 0
l_pres_abs_val = 0
l_next_abs_val = 0
l_yr_end 	   = ADD_DAYS(ADD_MONTHS(TRUNC(iv_start_date,'YYYY'),12),-1)
l_prev_yr_date = ADD_DAYS(TRUNC(iv_start_date,'YYYY'),-1)
l_leave        =  'Annual Leave'
l_annual_leave_half_day = 'Annual Leave Half Day'
l_pro_con      = PER_ASG_ATTRIBUTE11

if l_pro_con = 'N' then
(
l_prob_end     = TRUNC(PER_ASG_EFFECTIVE_END_DATE)
)
else
(
 l_prob_end = TRUNC(PER_ASG_EFFECTIVE_START_DATE)
)


l_abs_type_id = TO_NUMBER(GET_VALUE_SET('ALDAR Get Absence Type ID','|=P_LEAVE_TYPE='''||l_leave||''''))

l_Annual_leave_half_day_abs_type_id= TO_NUMBER(GET_VALUE_SET('ALDAR Get Absence Type ID','|=P_LEAVE_TYPE='''||l_annual_leave_half_day||''''))

l_log = ESS_LOG_WRITE(for_name||' Leave Start Date    : '||TO_CHAR(iv_start_date,'dd-MM-yyyy'))
l_log = ESS_LOG_WRITE(for_name||' Leave End Date      : '||TO_CHAR(iv_end_date,'dd-MM-yyyy'))
l_log = ESS_LOG_WRITE(for_name||' Absence Type ID     : '||TO_CHAR(l_abs_type_id))
l_log = ESS_LOG_WRITE(for_name||' Probation End Date  : '||TO_CHAR(l_prob_end,'dd-MM-yyyy'))
l_log = ESS_LOG_WRITE(for_name||' Logged in User Role : '||iv_logged_in_user_role)


/* Validation during Probation Period --------------------------------------------------------------------------------------------------------------------------- ENDS*/

/* Validation to Raise Error if Leave Type = Annual Leave Half Day and Day is Friday Abdulrahman 11Jul2024*/
IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_Annual_leave_half_day_abs_type_id) AND (to_char(iv_start_date,'D') = '6') ) THEN
		(
			valid = 'N'
			error_message  = 'ALDAR_ANN_LV_HALF_FRIDAY_ERR1' /* You cannot apply Annual Leave Half Day on Friday*/
			RETURN valid
		)


/* Validation to Raise Error if Leave Type = Annual Leave Half Day and Day is Friday Abdulrahman 11Jul2024*/

/* Validation during Probation Period --------------------------------------------------------------------------------------------------------------------------- STARTS*/

IF iv_start_date < l_prob_end AND l_pro_con = 'N' THEN
(
    l_start = trunc(l_hire)/*GREATEST(TRUNC(l_hire),TRUNC(iv_start_date,'YYYY')) */ 
	l_end   = trunc(l_prob_end) /*LEAST(ADD_DAYS(TRUNC(iv_start_date),-1), TRUNC(l_termin_date))*/
	l_date1 = ADD_DAYS(TRUNC(l_end,'MM'),-1)
	
	l_log = ESS_LOG_WRITE(for_name||' Leave is Applied in Probation')
	l_log = ESS_LOG_WRITE(for_name||' Start Date : '||TO_CHAR(l_start,'dd-MM-yyyy'))
	l_log = ESS_LOG_WRITE(for_name||' End Date   : '||TO_CHAR(l_end,'dd-MM-yyyy'))
	
	CHANGE_CONTEXTS(PERSON_ID = l_per_id, HR_ASSIGNMENT_ID = l_hr_id)
	(
        l_adjoth_val_cp	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','CP')              /* Adj - Compensatory                    */
        l_adjoth_val_ce	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','CE')              /* Adj - Clerical Error                  */
		l_round_off_val	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','ALDAR_ROUNDOFF')  /* Adj - Consultant Renewal              */
        l_adjoth_val	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','ALDAR_ADJ')                   /* Adjustment                            */ 
        l_carryover_val  = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'COVR')                     /* Carryover                             */
		l_init_val  = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'INIT')                     /* Initial*/
		
	
		CALL_FORMULA('ALDAR Annual Leave Accrual Matrix',
		                l_start    > 'iv_accrualperiodstartdate',
						l_end      > 'iv_accrualperiodenddate',
						l_acc_val  < 'accrual'  DEFAULT 0
					)
    )
	
	l_log = ESS_LOG_WRITE(for_name||' Compensatory Adjustment   : '||TO_CHAR(l_adjoth_val_cp))
	l_log = ESS_LOG_WRITE(for_name||' Clerical Error Adjustment : '||TO_CHAR(l_adjoth_val_ce))
	l_log = ESS_LOG_WRITE(for_name||' Round off Given           : '||TO_CHAR(l_round_off_val))
	l_log = ESS_LOG_WRITE(for_name||' Adjustment Value          : '||TO_CHAR(l_adjoth_val))
	l_log = ESS_LOG_WRITE(for_name||' Carryover Value           : '||TO_CHAR(l_carryover_val))
	l_log = ESS_LOG_WRITE(for_name||' Accrual for the period    : '||TO_CHAR(l_acc_val))
	
	
	i = 1
	
	CHANGE_CONTEXTS(START_DATE = l_hire, END_DATE = l_prob_end)
    (
		WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(i) LOOP
		(
			CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[i])
			(
				CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
				( 
	                /*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
					and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
					IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_abs_type_id) AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
						(anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
						(anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
						AND anc_per_abs_entrs_absence_entry_id_arr[i] <> l_ab_entry_id) THEN
				    (
			            IF (anc_abs_entrs_start_date <= l_end AND anc_abs_entrs_end_date > l_start) THEN
						(
						    l_abs_dur_start = TO_DATE((TO_CHAR(GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_start)),'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
							l_abs_dur_end   = TO_DATE((TO_CHAR(LEAST(TRUNC(anc_abs_entrs_end_date),TRUNC(l_end)),'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
							
							l_abs_dur = GET_PAY_AVAILABILITY('ASSIGN',l_abs_dur_start,l_abs_dur_end,'Y','Y','Y','Y','D')
							l_abs_val = l_abs_val + l_abs_dur
							
							l_log = ESS_LOG_WRITE(for_name||' Absence Start Date     : '||TO_CHAR(anc_abs_entrs_start_date,'dd-MM-yyyy'))
							l_log = ESS_LOG_WRITE(for_name||' Absence End Date       : '||TO_CHAR(anc_abs_entrs_end_date,'dd-MM-yyyy'))
							l_log = ESS_LOG_WRITE(for_name||' Absence Duration       : '||TO_CHAR(l_abs_dur))
				            l_log = ESS_LOG_WRITE(for_name||' Total Absence Duration : '||TO_CHAR(l_abs_val))
						)
					)		  
				)	    
			)
		
			i = i + 1
		)
    )
	
	l_total =  l_adjoth_val_cp + l_adjoth_val_ce + l_round_off_val + l_adjoth_val + l_acc_val + l_carryover_val - l_abs_val + l_init_val 
	
	l_log = ESS_LOG_WRITE(for_name||' Total Balance Available  : '||TO_CHAR(l_total))
	l_log = ESS_LOG_WRITE(for_name||' Current Absence Duration : '||TO_CHAR(l_abs_val))
	
	IF (iv_totalduration > l_total) AND (iv_logged_in_user_role = 'EMP') THEN
	(
	    valid = 'N'
		error_message  = 'ALDAR_ANNUAL_LEAVE_ERR1' /* You have insufficient Annual Leave. Your available balance is {MAX_DUR} days.*/
		token_name[1]  = 'MAX_DUR'
		token_value[1] = TO_CHAR(ROUND(l_total,2))
		
		RETURN valid, error_message, token_name, token_value
    )
	
	ELSE IF iv_totalduration <= l_total THEN
	(
	    l_start = trunc(l_hire)/*GREATEST(TRUNC(l_hire),TRUNC(iv_start_date,'YYYY')) */ 
		l_end   = ADD_DAYS(trunc(iv_start_date),-1) /*LEAST(ADD_DAYS(TRUNC(iv_start_date),-1), TRUNC(l_termin_date))*/

	    CHANGE_CONTEXTS(PERSON_ID = l_per_id)
	    (           
            l_adjoth_val_cp	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','CP')       
            l_adjoth_val_ce	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','CE') 
            l_round_off_val	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','ALDAR_ROUNDOFF') 			
            l_adjoth_val	 = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'ADJOTH','ALDAR_ADJ')            
            l_carryover_val  = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'COVR')  
			l_init_val  = GET_BAL_COMP_VAL(l_plan_name, l_start, l_end,   'INIT')                     /* Initial*/			
		
            CALL_FORMULA('ALDAR Annual Leave Accrual Matrix',
		                    l_start    > 'iv_accrualperiodstartdate',
						    l_end      > 'iv_accrualperiodenddate',
						    l_acc_val  < 'accrual'  DEFAULT 0
					    ) 
	    )
	
	    i = 1
	
		CHANGE_CONTEXTS(START_DATE = l_hire, END_DATE = l_prob_end)
		(
			WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(i) LOOP
			(
				CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[i])
				(
					CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
					( 
						/*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
						and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
						IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_abs_type_id) AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
							(anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
							(anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
							AND anc_per_abs_entrs_absence_entry_id_arr[i] <> l_ab_entry_id) THEN
						(
							IF (anc_abs_entrs_start_date <= l_end AND anc_abs_entrs_end_date > l_start) THEN
							(
								l_abs_dur_start = TO_DATE((TO_CHAR(GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_start)),'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
								l_abs_dur_end   = TO_DATE((TO_CHAR(LEAST(TRUNC(anc_abs_entrs_end_date),TRUNC(l_end)),'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
							
								l_abs_val = l_abs_val + GET_PAY_AVAILABILITY('ASSIGN',l_abs_dur_start,l_abs_dur_end,'Y','Y','Y','Y','D')
							)
				        )		  
					)	    
				)
		
				i = i + 1
			)
		)
	
		l_total = l_adjoth_val_cp + l_adjoth_val_ce + l_round_off_val + l_acc_val + l_carryover_val - l_abs_val + l_init_val
	
		IF (iv_totalduration > l_total) AND (iv_logged_in_user_role = 'EMP') THEN
		(
			valid = 'N'
			error_message  = 'ALDAR_ANNUAL_LEAVE_ERR1' /* You have insufficient Annual Leave. Your available balance is {MAX_DUR} days.*/
			token_name[1]  = 'MAX_DUR'
			token_value[1] = TO_CHAR(ROUND(l_total,2))
		
			RETURN valid, error_message, token_name, token_value
		)
	
	)
)



IF iv_start_date >= l_prob_end THEN
(
    l_pres_start = GREATEST(TRUNC(l_hire),TRUNC(iv_start_date,'YYYY'))
	l_pres_end   = LEAST(TO_DATE('31-12-'||TO_CHAR(l_pres_start,'YYYY'),'DD-MM-YYYY'), TRUNC(l_termin_date))
	
	l_next_start = ADD_DAYS(l_pres_end,1)
	l_next_end   = LEAST(TO_DATE('31-12-'||TO_CHAR(l_next_start,'YYYY'),'DD-MM-YYYY'), TRUNC(l_termin_date))
    
	/* Both Leave Start and End Dates are in same year */
	
    IF TO_CHAR(iv_start_date,'YYYY') = TO_CHAR(iv_end_date,'YYYY') THEN
    (	
        CHANGE_CONTEXTS(PERSON_ID = l_per_id)
	    (
			l_pres_adjoth_val_cp  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','CP')
			l_pres_adjoth_val_ce  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','CE')
            l_pres_round_off      = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH', 'ALDAR_ROUNDOFF')
			l_pres_adjoth_val	  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','ALDAR_ADJ')
			l_pres_carryover_val  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'COVR')
			l_Pres_init_val  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end,   'INIT')                     /* Initial*/
		
			CALL_FORMULA('ALDAR Annual Leave Accrual Matrix',
							l_pres_start   > 'iv_accrualperiodstartdate',
							l_pres_end     > 'iv_accrualperiodenddate',
							l_pres_acc_val < 'accrual'  DEFAULT 0
						)
		)
	
	    i = 1
	
		CHANGE_CONTEXTS(START_DATE = prd_start, END_DATE = prd_end)
		(
			WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(i) LOOP
			(
				CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[i])
				(
					CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
					( 
						/*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
						and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
						IF ((anc_abs_entrs_absence_type_id = l_abs_type_id) AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
							(anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
							(anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
							AND anc_per_abs_entrs_absence_entry_id_arr[i] <> l_ab_entry_id) THEN
						(
							IF (anc_abs_entrs_start_date <= l_pres_end AND anc_abs_entrs_end_date > l_pres_start) THEN
							(
							    l_pres_abs_start = TO_DATE((TO_CHAR(GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_pres_start)),'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
								l_pres_abs_end   = TO_DATE((TO_CHAR(LEAST(TRUNC(anc_abs_entrs_end_date),TRUNC(l_pres_end)),'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
								
								l_pres_abs_val = l_pres_abs_val + GET_PAY_AVAILABILITY('ASSIGN',l_pres_abs_start,l_pres_abs_end,'Y','Y','Y','Y','D')
							)
						)		  
					)	    
				)
		
				i = i + 1
			)
		)
		
		
        l_pres_total =  l_pres_adjoth_val_cp + l_pres_adjoth_val_ce + l_pres_round_off + l_pres_adjoth_val + l_pres_acc_val + l_pres_carryover_val - l_pres_abs_val  + l_Pres_init_val
	
		IF (iv_totalduration > l_pres_total) AND (iv_logged_in_user_role = 'EMP') THEN
		(
		    valid = 'N'
		    error_message  = 'ALDAR_ANNUAL_LEAVE_ERR1' /* You have insufficient Annual Leave. Your available balance is {MAX_DUR} days.*/
		    token_name[1]  = 'MAX_DUR'
		    token_value[1] = TO_CHAR(ROUND(l_pres_total,2))
		
		    RETURN valid, error_message, token_name, token_value
		)
	)
	
	/* Both Leave Start and End Dates are in different year */
	
	IF TO_CHAR(iv_start_date,'YYYY') <> TO_CHAR(iv_end_date,'YYYY') THEN
    (	
        CHANGE_CONTEXTS(PERSON_ID = l_per_id)
	    (
			l_pres_adjoth_val_cp  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','CP')
			l_pres_adjoth_val_ce  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','CE')
            l_pres_round_off      = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH', 'ALDAR_ROUNDOFF')
			l_pres_adjoth_val	  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'ADJOTH','ALDAR_ADJ')
			l_pres_carryover_val  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end, 'COVR')
			l_Pres_init_val  = GET_BAL_COMP_VAL(l_plan_name, l_pres_start, l_pres_end,   'INIT')                     /* Initial*/
			
			CALL_FORMULA('ALDAR Annual Leave Accrual Matrix',
							l_pres_start   > 'iv_accrualperiodstartdate',
							l_pres_end     > 'iv_accrualperiodenddate',
							l_pres_acc_val < 'accrual'  DEFAULT 0
						)
						
			l_next_adjoth_val_cp  = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end, 'ADJOTH','CP')
			l_next_adjoth_val_ce  = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end, 'ADJOTH','CE')
			l_next_round_off      = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end, 'ADJOTH','ALDAR_ROUNDOFF')
			l_next_adjoth_val	  = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end, 'ADJOTH','ALDAR_ADJ')
			l_next_carryover_val  = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end, 'COVR')
			l_next_init_val  = GET_BAL_COMP_VAL(l_plan_name, l_next_start, l_next_end,   'INIT')                     /* Initial*/
			CALL_FORMULA('ALDAR Annual Leave Accrual Matrix',
							l_next_start   > 'iv_accrualperiodstartdate',
							l_next_end     > 'iv_accrualperiodenddate',
							l_next_acc_val < 'accrual'  DEFAULT 0
						)
		)
	
	    i = 1
	
		CHANGE_CONTEXTS(START_DATE = prd_start, END_DATE = prd_end)
		(
			WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(i) LOOP
			(
				CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[i])
				(
					CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
					( 
						/*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
						and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
						IF ((anc_abs_entrs_absence_type_id = l_abs_type_id) AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
							(anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
							(anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
							AND anc_per_abs_entrs_absence_entry_id_arr[i] <> l_ab_entry_id) THEN
						(
							IF (anc_abs_entrs_start_date <= l_pres_end AND anc_abs_entrs_end_date > l_pres_start) THEN
							(
							    l_pres_abs_start = TO_DATE((TO_CHAR(GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_pres_start)),'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
								l_pres_abs_end   = TO_DATE((TO_CHAR(LEAST(TRUNC(anc_abs_entrs_end_date),TRUNC(l_pres_end)),'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
								
								l_pres_abs_val = l_pres_abs_val + GET_PAY_AVAILABILITY('ASSIGN',l_pres_abs_start,l_pres_abs_end,'Y','Y','Y','Y','D')
							)
							
							IF (anc_abs_entrs_start_date <= l_next_end AND anc_abs_entrs_end_date > l_next_start) THEN
							(
							    l_next_abs_start = TO_DATE((TO_CHAR(GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_next_start)),'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
								l_next_abs_end   = TO_DATE((TO_CHAR(LEAST(TRUNC(anc_abs_entrs_end_date),TRUNC(l_next_end)),'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
								
								l_next_abs_val = l_next_abs_val + GET_PAY_AVAILABILITY('ASSIGN',l_next_abs_start,l_next_abs_end,'Y','Y','Y','Y','D')
								
							)
						)		  
					)	    
				)
		
				i = i + 1
			)
		)
	
	    l_pres_dur_date1 = TO_DATE((TO_CHAR(iv_start_date,'dd/MM/yyyy')||' 00:00:00'),'dd/MM/yyyy HH24:MI:SS')
		l_pres_dur_date2 = TO_DATE((TO_CHAR(l_pres_end,'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
		l_next_dur_date1 = TO_DATE((TO_CHAR(l_next_start,'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
		l_next_dur_date2 = TO_DATE((TO_CHAR(iv_end_date,'dd/MM/yyyy')||' 23:59:59'),'dd/MM/yyyy HH24:MI:SS')
		
		l_pres_ab_duration = GET_PAY_AVAILABILITY('ASSIGN',l_pres_dur_date1,l_pres_dur_date2,'Y','Y','Y','Y','D')
		l_next_ab_duration = GET_PAY_AVAILABILITY('ASSIGN',l_next_dur_date1,l_next_dur_date2,'Y','Y','Y','Y','D')
		
	    l_pres_total =  l_pres_adjoth_val_cp + l_pres_round_off + l_pres_adjoth_val + l_pres_acc_val + l_pres_carryover_val - l_pres_abs_val + l_Pres_init_val
		
        l_next_carryover_val = l_pres_total - l_pres_ab_duration
		
        l_next_total =  l_next_adjoth_val_cp + l_next_adjoth_val_ce + l_next_round_off + l_next_adjoth_val + l_next_acc_val + l_next_carryover_val - l_next_abs_val + l_next_init_val
		
        IF (l_pres_ab_duration > l_pres_total) AND (iv_logged_in_user_role = 'EMP') THEN
		(
		    valid = 'N'
			error_message  = 'ALDAR_ANNUAL_LEAVE_ERR2' /* You have insufficient Annual Leave. Your available balance for the year - {YEAR} is {MAX_DUR} days. */
			token_name[1]  = 'MAX_DUR'
			token_value[1] = TO_CHAR(l_pres_total)
			token_name[2]  = 'YEAR'
			token_value[2] = TO_CHAR(l_pres_start,'YYYY')
			
			RETURN valid, error_message, token_name, token_value
		)
	
		IF (l_next_ab_duration > l_next_total) AND (iv_logged_in_user_role = 'EMP') THEN
		(
		    valid = 'N'
			error_message  = 'ALDAR_ANNUAL_LEAVE_ERR2' /* You have insufficient Annual Leave. Your available balance for the year - {YEAR} is {MAX_DUR} days. */
			token_name[1]  = 'MAX_DUR'
			token_value[1] = TO_CHAR(l_next_total)
			token_name[2]  = 'YEAR'
			token_value[2] = TO_CHAR(l_next_start,'YYYY')
			
			RETURN valid, error_message, token_name, token_value
	    )
    )
)

RETURN valid
