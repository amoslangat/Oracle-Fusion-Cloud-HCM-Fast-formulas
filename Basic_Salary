/*
**************************************************************
Formula Name : Basic Salary
Formula Type : Oracle Payroll
Description  : In Proration condition Consider cal days for feb month and 30 days for other than feb month.
Author       : Amos Langat
Date         : 30-Nov-2022
Last Updated : 
Version      :           
***************************************************************/

DEFAULT_DATA_VALUE FOR basic_salary_amount_entry_value    IS 0

DEFAULT FOR pay_earn_period_start     IS '1951/01/01 00:00:00' (DATE)
DEFAULT FOR pay_earn_period_end       IS '4712/12/31 00:00:00' (DATE)
DEFAULT FOR pay_asg_hire_date         IS '1951/01/01 00:00:00' (DATE)
DEFAULT FOR pay_asg_termination_date  IS '4712/12/31 00:00:00' (DATE)
DEFAULT FOR prorate_start             IS '1951/01/01 00:00:00' (DATE)
DEFAULT FOR prorate_end               IS '4712/12/31 00:00:00' (DATE)

DEFAULT FOR BASIC_SALARY_ASG_ITD                      IS 0
DEFAULT FOR BASIC_SALARY_RETROACTIVE_ASG_ITD          IS 0
DEFAULT FOR ALDAR_LATE_HIRE_ARREAR_ADJUSTMENT_ASG_ITD IS 0


Inputs ARE Amount,
           prorate_start (date),
		   prorate_end   (date)


l_cal_days   = DAYS_BETWEEN(pay_earn_period_end, pay_earn_period_start) + 1
l_start_date = GREATEST(pay_earn_period_start,pay_asg_hire_date,prorate_start)
l_end_date   = LEAST(pay_earn_period_end,pay_asg_termination_date,prorate_end)
l_start      = GREATEST(pay_asg_hire_date,element_entry_start_date)
l_tot_days   = DAYS_BETWEEN(l_end_date,l_start_date) + 1
l_value      = 0
l_arrear     = 0
formula_name = '[ALDAR Basic Salary]'
 
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Calendar Days : '||TO_CHAR(l_cal_days))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Total Days    : '||TO_CHAR(l_tot_days))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Prorate Start : '||TO_CHAR(prorate_start,'DD-MM-YYYY'))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Prorate End   : '||TO_CHAR(prorate_end,'DD-MM-YYYY'))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Start Date    : '||TO_CHAR(l_start_date,'DD-MM-YYYY'))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' End Date      : '||TO_CHAR(l_end_date,'DD-MM-YYYY'))
l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Amount        : '||TO_CHAR(Amount))


l_amount     = Amount/12
l_assignment_id	= asg_hr_asg_id
l_sal_change = 'N'
l_current    = 0
l_reference  = 0
l_value      = ROUND((l_amount/l_cal_days) * l_tot_days,3)

/**Getting Person_number of the Employee **/				
CALL_FORMULA('ALDAR Get HR Data',l_assignment_id          > 'hr_id',l_start_date> 'eff_date','Person Number'  > 'mode',l_person_number   < 'l_text'  DEFAULT 'X')


k = 1

CHANGE_CONTEXTS(date_earned = pay_earn_period_start) 
( 
	WHILE (basic_salary_amount_entry_value.EXISTS (k)) LOOP
	(
		IF basic_salary_amount_entry_value[k] > 0 THEN
		(
			l_reference = basic_salary_amount_entry_value[k]/12
			
            l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Reference Basic Salary Amount is '||TO_CHAR(l_reference))
			
			EXIT
		)
		 k = k + 1
	)
)

l_loop_start = ADD_DAYS(pay_earn_period_start,1)
l_loop_end   = pay_earn_period_end

if (prorate_start was not defaulted or prorate_end was not defaulted) then
(
WHILE ((l_loop_start <= l_loop_end) AND (l_sal_change <> 'Y')) LOOP
(
    k = 1

    CHANGE_CONTEXTS(date_earned = l_loop_start) 
    ( 
	    WHILE (basic_salary_amount_entry_value.EXISTS (k)) LOOP
	    (
		    IF basic_salary_amount_entry_value[k] > 0 THEN
		    (
			    l_current = basic_salary_amount_entry_value[k]/12
			
                l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Basic Salary Amount is '||TO_CHAR(l_current))
		    )
			
			IF l_reference <> l_current THEN
			(
			    l_sal_change = 'Y'
				
				l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Salary Change Flag is : '||l_sal_change)
				
			)
			
			k = k + 1
	    )
    )
    
	l_loop_start = ADD_DAYS(l_loop_start,1)
)

)




if ((LAST_DAY (pay_earn_period_start) = LAST_DAY (pay_asg_hire_date) and pay_asg_hire_date <> pay_earn_period_start) or 
	(LAST_DAY (pay_earn_period_end) = LAST_DAY (pay_asg_termination_date) and pay_asg_termination_date <> pay_earn_period_end)) then
(
	l_sal_change = 'Y'
	l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Joining/ Termination Month Proration : '|| l_sal_change)

)


if (prorate_start was not defaulted or prorate_end was not defaulted) and l_sal_change = 'Y' then
(

  l_log = PAY_INTERNAL_LOG_WRITE(formula_name||'Entering Proration Loop')
  l_log = PAY_INTERNAL_LOG_WRITE(formula_name||'Proration month' || to_char(prorate_start,'MM'))

	if to_char(prorate_start,'MM') = '02' then
	(   
	
		l_log = PAY_INTERNAL_LOG_WRITE('Entering loop if proration month is feb')
	
		l_value  = round((l_amount/l_cal_days) * l_tot_days,3)
	 
	)
	else
	(
	
	 l_log = PAY_INTERNAL_LOG_WRITE('Entering loop if proration month other than feb')
	
	l_value  = round((l_amount/30) * l_tot_days,3)
	
	)

)

 if l_person_number   = '2296'  and l_tot_days = 24 then
	 (
	 l_value =  53326 
	       
	  )

l_value = round(l_value)

 l_log = PAY_INTERNAL_LOG_WRITE(formula_name||' Pay Value     : '||TO_CHAR(l_value))

/* ================== Arrear Loop Start ================== */

l_balance = BASIC_SALARY_ASG_ITD + BASIC_SALARY_RETROACTIVE_ASG_ITD + ALDAR_LATE_HIRE_ARREAR_ADJUSTMENT_ASG_ITD

if l_balance  = 0  and l_start < pay_earn_period_start then
(
 
  l_log = pay_internal_log_write(formula_name||'Arrear Start Date : '||to_char(l_start))
  l_log = pay_internal_log_write(formula_name||'Previous Balance : '||to_char(l_balance))

  l_m = trunc(months_between(pay_earn_period_start,l_start))
  if to_char(pay_earn_period_start,'dd') = to_char(l_start,'dd') then 
  (
   l_m = l_m - 1
  )
  l_log = pay_internal_log_write(formula_name||'Arrear Months: '||to_char(l_m))
  
  l_days = days_between(trunc(add_months(l_start,1),'MM'),l_start)
  l_log = pay_internal_log_write(formula_name||'Arrear Pay Days in hire month: '||to_char(l_days))
 while l_m >= 0 loop
 (
 if l_arrear = 0  then (
 if to_char(l_start,'MM') = '02' then
 (
 l_calender_days = days_between(last_day(l_start),trunc(l_start,'MM'))+1
 )
 ELSE
 (
 l_calender_days = 30
 ))
 if to_char(pay_earn_period_start,'dd') = to_char(l_start,'dd') THEN
 (
  l_days = 1
 l_calender_days = 1
 )
 l_arrear = round(l_arrear + round(l_days/l_calender_days* l_amount ,3))
 l_days = 1
 l_calender_days = 1
 l_m = l_m - 1
 )
 l_log = PAY_INTERNAL_LOG_WRITE(formula_name||'Arrears Value     : '||TO_CHAR(l_arrear))
 return l_arrear,l_value
)
/* ================== Arrear Loop End ================== */

return l_value 
