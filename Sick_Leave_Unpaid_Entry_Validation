/*
****************************************************************************************************
 Formula Name   : Sick Leave Unpaid Entry Validation
 Formula Type   : Global Absence Entry Validation
 
 Description    : •	Employees can avail 45 calendar days of Sick Leave Unpaid
                  •	Sick Leave Unpaid should be allowed only once Sick Leave Full Pay and Half Pay balance is exhausted.
 
Author          : Amos Langat
Date            : 16-Jun-2024
 Last update on : 
*******************************************************************************************************/ 

DEFAULT_DATA_VALUE FOR anc_per_abs_entrs_absence_entry_id_arr IS 0

DEFAULT FOR ACP_HIRE_DATE                     IS '1951/01/01 00:00:00' (date)
DEFAULT FOR PER_ASG_DATE_PROBATION_END        IS '1951/01/01 00:00:00' (date)
DEFAULT FOR anc_abs_entrs_start_date          IS '4712/12/31 00:00:00' (date)
DEFAULT FOR anc_abs_entrs_end_date            IS '4712/12/31 00:00:00' (date)
DEFAULT FOR anc_abs_entrs_absence_status_cd   IS ' '
DEFAULT FOR anc_abs_entrs_approval_status_cd  IS ' '
DEFAULT FOR anc_abs_typ_name                  IS ' '
DEFAULT FOR anc_abs_entrs_duration            IS 0
DEFAULT FOR anc_abs_entrs_start_date_duration IS 0
DEFAULT FOR anc_abs_entrs_end_date_duration   IS 0
DEFAULT FOR anc_abs_entrs_absence_type_id     IS 0

INPUTS ARE iv_end_date       (date), 
           iv_start_date     (date), 
		   iv_totalduration  (number)


l_leave       =  'Sick Leave Unpaid'
valid         =  'Y'
l_date        =  TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)))
l_probation   = PER_ASG_DATE_PROBATION_END
l_months      = add_months(ACP_HIRE_DATE,3)
l_ab_start    =  TRUNC(iv_start_date)
l_ab_end      =  TRUNC(iv_end_date)
prd_start     =  TO_DATE('1951-01-01','yyyy-MM-dd')
prd_end       =  TO_DATE('4712-12-31','yyyy-MM-dd')
l_ab_id       =  GET_CONTEXT(ABSENCE_TYPE_ID,0)
l_start       =  TRUNC(l_date,'yyyy')
l_end         =  ADD_DAYS(ADD_MONTHS(l_start,12),-1)
l_leave       =  'Sick Leave Unpaid'
valid         =  'Y'
l_duration    =  0
l_sick_duration = 0
l_sick_half   = 0
i             =  1
l_next_year_duration = 0
l_absence_entry_id	= TO_CHAR(GET_CONTEXT(ABSENCE_ENTRY_ID,0))

l_abs_type_id   = TO_NUMBER(GET_VALUE_SET('ALDAR_GET_ABSENCE_TYPE_ID','|=P_LEAVE_TYPE='''||'Sick Leave'||''''))
l_abs_type_id_1 = 300000006252857 /*TO_NUMBER(GET_VALUE_SET('ALDAR_GET_ABSENCE_TYPE_ID','|=P_LEAVE_TYPE='''||'Sick Leave – Half Pay'||''''))*/
l_abs_type_id_2 = TO_NUMBER(GET_VALUE_SET('ALDAR_GET_ABSENCE_TYPE_ID','|=P_LEAVE_TYPE='''||'Sick Leave Unpaid'||''''))

/*** To get the total leaves date of sick leave -- starts **/


CHANGE_CONTEXTS(START_DATE = prd_start, END_DATE = prd_end)
(
    WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(i) LOOP
    (
        CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[i])
        (
            CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
            ( 
	  
	            /*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
		        and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
	            IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_abs_type_id) /*Sick Leave*/
				AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
		            (anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
                    (anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
		           AND anc_per_abs_entrs_absence_entry_id_arr[i] <> TO_NUMBER(l_absence_entry_id)) THEN
		        ( 
		            /* To get Absences in the effective date year */
			
		            IF (anc_abs_entrs_start_date <= l_end and anc_abs_entrs_end_date >= l_start) THEN
		            (
		                l_sick_duration = l_sick_duration + (DAYS_BETWEEN(least(TRUNC(anc_abs_entrs_end_date),TRUNC(l_end)),GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_start)))+1)
		            )	
		            
		        )		  
	        )	    
	    )
		
        i=i+1
    )
)

/*** To get the total leaves date of sick leave -- ends **/

K = 1
/*** To get the total leaves date of sick leave Half pay -- starts **/

CHANGE_CONTEXTS(START_DATE = prd_start, END_DATE = prd_end)
(
    WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(K) LOOP
    (
        CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[K])
        (
            CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
            ( 
	  
	            /*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
		        and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
	            IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_abs_type_id_1) /*Sick Leave – Half Pay*/
				AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
		            (anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
                    (anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
		           AND anc_per_abs_entrs_absence_entry_id_arr[K] <> TO_NUMBER(l_absence_entry_id)) THEN
		        ( 
		            /* To get Absences in the effective date year */
			
		            IF (anc_abs_entrs_start_date <= l_end and anc_abs_entrs_end_date >= l_start) THEN
		            (
		                l_sick_half = l_sick_half + (DAYS_BETWEEN(least(TRUNC(anc_abs_entrs_end_date),TRUNC(l_end)),GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_start)))+1)
		            )	
		            
		        )		  
	        )	    
	    )
		
        K=K+1
    )
)

/*** To get the total leaves date of sick leave Half pay -- ends **/

if l_sick_duration <> 15 or l_sick_half < 30 then
(

    valid = 'N'
    error_message  = 'ALDAR_SICK_UNPAID_ERR' /*Sick Leave Unpaid can be allowed only once Sick Leave Full Pay and Half Pay balance is exhausted.*/
   
    
    RETURN VALID,error_message



)


/*** To get the total leaves date of sick leave Unpaid -- starts **/

j = 1
CHANGE_CONTEXTS(START_DATE = prd_start, END_DATE = prd_end)
(
    WHILE anc_per_abs_entrs_absence_entry_id_arr.EXISTS(j) LOOP
    (
        CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = anc_per_abs_entrs_absence_entry_id_arr[j])
        (
            CHANGE_CONTEXTS(ABSENCE_TYPE_ID = l_ab_id)
            ( 
	  
	            /*if Absence status is SUBMITTED Then approval status should be either APPROVED/AWAITING
		        and if absence status is WITHDRAWN then approval status should be ORA_AWAIT_AWAIT*/
		 
	            IF ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID = l_abs_type_id_2) /*Sick Leave Unpaid*/
				AND ((anc_abs_entrs_absence_status_cd = 'SUBMITTED' AND 
		            (anc_abs_entrs_approval_status_cd = 'APPROVED' OR anc_abs_entrs_approval_status_cd = 'AWAITING')) OR
                    (anc_abs_entrs_absence_status_cd = 'ORA_WITHDRAWN' AND anc_abs_entrs_approval_status_cd = 'ORA_AWAIT_AWAIT')) 
		           AND anc_per_abs_entrs_absence_entry_id_arr[j] <> TO_NUMBER(l_absence_entry_id)) THEN
		        ( 
		            /* To get Absences in the effective date year */
			
		            IF (anc_abs_entrs_start_date <= l_end and anc_abs_entrs_end_date >= l_start) THEN
		            (
		                l_duration = l_duration + (DAYS_BETWEEN(least(TRUNC(anc_abs_entrs_end_date),TRUNC(l_end)),GREATEST(TRUNC(anc_abs_entrs_start_date),TRUNC(l_start)))+1)
		            )	
		            
		        )		  
	        )	    
	    )
		
        j=j+1
    )
)

/*** To get the total leaves date of sick leave Half pay -- ends **/
/* Fetches Current Absence Duration */
l_present_duration = iv_totalduration

l_total = l_duration + l_present_duration
l_bal = 45 - l_duration


IF (l_total > 45) THEN
(
    valid = 'N'
    error_message  = 'ALDAR_SICK_UNPAID_ERR1' /*Sick Leave Unpaid is limited to a maximum of 45 days per year. Your remaining entitlement is {REM_BAL} days.*/
    token_name[1]  = 'REM_BAL'
    token_value[1] = TO_CHAR(l_bal)
    
    RETURN VALID,error_message,token_name,token_value
)



RETURN valid
