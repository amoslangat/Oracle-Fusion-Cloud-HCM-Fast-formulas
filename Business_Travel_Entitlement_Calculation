/*****************************************************************************
Formula name: Business Travel Entitlement Calculation
Formula type: Oracle Payroll
Description :
Author      : Amos Langat
Date        : 15-Dec-2022
update date : 13-12-2023
******************************************************************************/
default for pay_earn_period_end is '4712/12/31 00:00:00' (date)
default for pay_earn_period_start is '0001/01/01 00:00:00' (date)
default for pay_asg_termination_date is '4712/12/31 00:00:00' (date)
default for pay_dir_comp_dir_card_id is -1
default_data_value for employee_social_insurance_details_dir_card_dir_card_id  is -1
default for asg_hr_asg_id is -1
default for prorate_start is '0001/01/01 00:00:00' (date)
default for prorate_end is '4712/12/31 00:00:00' (date)

inputs are prorate_start(date),
		   prorate_end(date)



l_abs_unit			= 0
l_abs_factor		= 0
l_tot_earn      	= 0
l_tot_earn_basic	= 0
l_tot_ded	      	= 0
l_abs_count     	= 0
l_days				= 0
l_ded_days			= 0
l_prorate_start		= greatest(prorate_start, pay_earn_period_start)
l_prorate_end		= least(prorate_end, pay_earn_period_end)
l_al_payment		= 0
l_days1             = 0
l_days2             = 0
l_days3             = 0
l_days4             = 0
l_additional_payment= 0 
l_payment           = 0
l_abs_days          = 0
l_Onward_Extra_dys	= 0
l_Return_Extra_dys	= 0
formula_name        = '[Aldar Business Travel ENT_CAL]'

l_log = pay_internal_log_write(formula_name||' - start')

l_log = pay_internal_log_write(formula_name||'- start')
l_log = pay_internal_log_write(formula_name||' : l_prorate_start ' || to_char(l_prorate_start))
l_log = pay_internal_log_write(formula_name||' : l_prorate_end ' || to_char(l_prorate_end))

calc_breakdown_id_1		= employee_social_insurance_details_dir_card_dir_card_id[1]
l_eff_date				= get_context(EFFECTIVE_DATE,'0001/01/01 00:00:00' (date))
l_cal_days				= days_between(pay_earn_period_end,pay_earn_period_start) + 1
l_comp_id				= deduction_component_by_ee


change_contexts (dir_card_comp_id = l_comp_id)/*Start C4*/
(
    l_index = all_asgs_link_to_deduction_component.first(-1)
    if (all_asgs_link_to_deduction_component.exists(l_index) ) then
    (
		l_asg_id = all_asgs_link_to_deduction_component[l_index]
        change_contexts (payroll_assignment_id = l_asg_id)/*Start C3*/
        (
			
			l_abs_entitlement_comp_sdate = trunc(pay_dir_comp_min_start_date,'dd')
			l_abs_entitlement_comp_edate = trunc(pay_dir_comp_max_end_date,'dd')
			l_log = pay_internal_log_write(formula_name||' : l_abs_entitlement_comp_sdate ' || to_char(l_abs_entitlement_comp_sdate))
			l_log = pay_internal_log_write(formula_name||' : l_abs_entitlement_comp_edate ' || to_char(l_abs_entitlement_comp_edate))
						
						
			l_abs_start_date	= greatest(pay_earn_period_start, l_abs_entitlement_comp_sdate)
			l_abs_end_date		= least(pay_earn_period_end, l_abs_entitlement_comp_edate)
			l_log = pay_internal_log_write(formula_name||' : l_abs_start_date ' || to_char(l_abs_start_date))
			l_log = pay_internal_log_write(formula_name||' : l_abs_end_date ' || to_char(l_abs_end_date))
			
			l_start_date = to_char(l_abs_entitlement_comp_sdate,'MM-YYYY')
			change_contexts(CALC_BREAKDOWN_ID = calc_breakdown_id_1)
			(        
				
				l_eff_date = least(pay_asg_termination_date,pay_earn_period_end) 
				l_hr_asg_id	= asg_hr_asg_id
		
		        set_input ('hr_id', l_hr_asg_id)
				set_input ('eff_date',l_abs_entitlement_comp_sdate )
				set_input ('mode', 'Grade')
				execute('ALDAR GET HR DATA')
				l_grade = get_output('l_text','ZZ')
				
				l_log = pay_internal_log_write(formula_name||' : Grade of the employee ' || (l_grade))
			)
			
				CALL_FORMULA('ALDAR GET HR DATA',
						 l_hr_asg_id               > 'hr_id',
							l_abs_entitlement_comp_sdate           > 'eff_date',
							'Business Unit' 		 > 'mode',
							l_Business_unit             < 'l_text'  DEFAULT 'X'
						)						
				l_CAL_MODE = GET_TABLE_VALUE('ALDAR_BUSINESS_UNIT_ELIGIBILITY','Eligibility',l_Business_unit,'0')	
			
			
			call_formula('ALDAR_GET_BUSINESS_ABSENCE_ENTRY_DETAILS',
							 l_hr_asg_id    > 'L_ASG_ID',
							 l_abs_entitlement_comp_sdate    > 'L_SDATE',
							 l_abs_entitlement_comp_edate    > 'L_EDATE',
							 l_hotel_provided < 'l_hotel_provided' default 'X',
							 l_executive_staff < 'l_executive_staff' default 'x',
				             l_Onward_flight_travel_hrs < 'l_Onward_flight_travel_hrs' default 'x',
				             l_Return_flight_travel_hrs < 'l_Return_flight_travel_hrs' default 'x',
							 
				             l_event_start_date < 'l_event_start_date' default '4712/12/31 00:00:00' (date),
				             l_event_end_date < 'l_event_end_date' default '1951/01/01 00:00:00' (date),

				             l_event_start_date_2 < 'l_event_start_date_2' default '4712/12/31 00:00:00' (date),
				             l_event_end_date_2 < 'l_event_end_date_2' default '1951/01/01 00:00:00' (date),

				             l_event_start_date_3 < 'l_event_start_date_3' default '4712/12/31 00:00:00' (date),
				             l_event_end_date_3 < 'l_event_end_date_3' default '1951/01/01 00:00:00' (date),

				             l_event_start_date_4 < 'l_event_start_date_4' default '4712/12/31 00:00:00' (date),
				              l_event_end_date_4 < 'l_event_end_date_4' default '1951/01/01 00:00:00' (date)
						)	
			l_log = pay_internal_log_write(formula_name||': l_hotel_provided ' || (l_hotel_provided))
            l_log = pay_internal_log_write(formula_name||' - l_executive_staff '||l_executive_staff)
			
            l_log = pay_internal_log_write(formula_name||' - l_Onward_flight_travel_hrs '||l_Onward_flight_travel_hrs)
            l_log = pay_internal_log_write(formula_name||' - l_Return_flight_travel_hrs '||l_Return_flight_travel_hrs)
			
            l_log = pay_internal_log_write(formula_name||' - l_event_start_date '||TO_CHAR(l_event_start_date,'DD-MM-YYYY'))
            l_log = pay_internal_log_write(formula_name||' - l_event_end_date '||TO_CHAR(l_event_end_date,'DD-MM-YYYY'))

            l_log = pay_internal_log_write(formula_name||' - l_event_start_date_2 '||TO_CHAR(l_event_start_date_2,'DD-MM-YYYY'))
            l_log = pay_internal_log_write(formula_name||' - l_event_end_date_2 '||TO_CHAR(l_event_end_date_2,'DD-MM-YYYY'))

            l_log = pay_internal_log_write(formula_name||' - l_event_start_date_3 '||TO_CHAR(l_event_start_date_3,'DD-MM-YYYY'))
            l_log = pay_internal_log_write(formula_name||' - l_event_end_date_3 '||TO_CHAR(l_event_end_date_3,'DD-MM-YYYY'))

            l_log = pay_internal_log_write(formula_name||' - l_event_start_date_4 '||TO_CHAR(l_event_start_date_4,'DD-MM-YYYY'))
            l_log = pay_internal_log_write(formula_name||' - l_event_end_date_4 '||TO_CHAR(l_event_end_date_4,'DD-MM-YYYY'))
			
			 
					change_contexts(part_name = 'ORA_ENTITLEMENT_UNIT')
					(
						call_formula('CALL_CALC_VALUE',
									0           > 'BASE',
									l_abs_entitlement_date_abs_unit < 'DED_AMOUNT' default 0,
									l_abs_entitlement_date_uom  < 'OUT_UOM'    default 'ND'
									)
					)
					l_log = pay_internal_log_write(formula_name||': Total Duration ' || to_char(l_abs_entitlement_date_abs_unit))
					l_log = pay_internal_log_write(formula_name||': l_abs_entitlement_date_uom ' || l_abs_entitlement_date_uom)
					l_tot_duration = l_abs_entitlement_date_abs_unit

			l_abs_cnt = 1
			l_cur_period_actual_days = 0
            l_abs_entitlement_dates = pay_child_dir_comp_for_run_period_dir_card_comp_id
			while (l_abs_entitlement_dates.exists(l_abs_cnt))loop
            (
				l_abs_entitlement_date_comp_id = l_abs_entitlement_dates[l_abs_cnt]
                l_log = pay_internal_log_write(formula_name||' : Absence Entitlement Date Comp Id:'+to_char(l_abs_entitlement_date_comp_id))
                l_log = pay_internal_log_write(formula_name||': getting the value definitions')
                change_contexts (dir_card_comp_id = l_abs_entitlement_date_comp_id)/*Start C2*/
                (
                  l_abs_entitlement_date_comp_date = pay_dir_comp_min_start_date
				  
				  if l_abs_entitlement_date_comp_date >= l_prorate_start and l_abs_entitlement_date_comp_date <= l_prorate_end then
				  (
					  change_contexts (date_earned = l_abs_entitlement_date_comp_date)/*Start C1*/
					  (
						l_log = pay_internal_log_write(formula_name||' : l_abs_entitlement_date_comp_date ' || to_char(l_abs_entitlement_date_comp_date))

	/*-----------------------------------------------------  Entitlement Unit  --------------------------------------------------------------------------------*/
						change_contexts (date_earned = l_abs_entitlement_date_comp_date)
						(
						change_contexts(part_name = 'ORA_ENTITLEMENT_UNIT')
								(
									call_formula('CALL_CALC_VALUE',
												0           > 'BASE',
												l_abs_entitlement_date_abs_unit < 'DED_AMOUNT' default 0,
												l_abs_entitlement_date_uom  < 'OUT_UOM'    default 'ND'
												)
								)
						)
						l_log = pay_internal_log_write(formula_name||' : l_abs_entitlement_date_abs_unit ' || to_char(l_abs_entitlement_date_abs_unit))
						l_log = pay_internal_log_write(formula_name||': l_abs_entitlement_date_uom ' || l_abs_entitlement_date_uom)
						l_abs_unit = l_abs_unit + l_abs_entitlement_date_abs_unit
						l_cur_period_actual_days = l_cur_period_actual_days + l_abs_entitlement_date_abs_unit
					 )/*End of Context C1*/
					 
					
				
				   )/*End of If*/
				)/*End of Context C2*/
				l_log = pay_internal_log_write(formula_name||' : l_abs_entitlement_date_comp_date ' || to_char(l_abs_entitlement_date_comp_date))

				l_abs_cnt = l_abs_cnt + 1
				
			)/*End of While Loop*/

		)/*End of Context C3*/
	)/*end of if*/
	else
	(
		l_log = pay_internal_log_write(formula_name||' Error.. Assignment id is missing')
		l_error = pay_log_error('PAY:PAY_ASG_ID_MISSING')
	)
)/* End of If*/

l_tot_ded	= 0

if  l_start_date = TO_CHAR(pay_earn_period_start,'MM-YYYY')then
(
	if(l_CAL_MODE = 'ALDAR')then(
	l_grade_value  = TO_NUMBER(GET_TABLE_VALUE('ALDAR_BUSINESS_TRAVEL','BUSINESS_TRAVEL',l_grade,'0'))
		)
	if(l_CAL_MODE = 'C2I')then(
	l_grade_value  = TO_NUMBER(GET_TABLE_VALUE('C2i_BUSINESS_TRAVEL','Outside_UAE',l_grade,'0'))
		)
		
  /** Condition for in business travel details based on flight travel hours ***/
	if l_Onward_flight_travel_hrs = '> 8 Hours' then
    (
		l_Onward_Extra_dys = 2
	)
    if l_Onward_flight_travel_hrs = '> 5 and <= 8 Hours' then
    (
		l_Onward_Extra_dys = 1
	
	)
	
	l_log = pay_internal_log_write(formula_name||' : l_Onward_flight_travel_hrs ' || (l_Onward_flight_travel_hrs))
	l_log = pay_internal_log_write(formula_name||' : Extra Number of days to be paid for Onward business travel ' || to_char(l_Onward_Extra_dys))

	if l_Return_flight_travel_hrs = '> 8 Hours' then
    (
		l_Return_Extra_dys = 2
	)
    if l_Return_flight_travel_hrs = '> 5 and <= 8 Hours' then
    (
		l_Return_Extra_dys = 1

	)
	l_log = pay_internal_log_write(formula_name||' : l_Return_flight_travel_hrs ' || (l_Return_flight_travel_hrs))
	l_log = pay_internal_log_write(formula_name||' : Extra Number of days to be paid for RETURN business travel ' || to_char(l_Return_Extra_dys))

	l_business_trav_st_dt = LEAST( l_event_start_date, l_event_start_date_2, l_event_start_date_3, l_event_start_date_4)
	l_business_trav_end_dt = GREATEST ( l_event_end_date, l_event_end_date_2, l_event_end_date_3, l_event_end_date_4)
	
	l_log = pay_internal_log_write(formula_name||' - l_business_trav_st_dt '||TO_CHAR(l_business_trav_st_dt,'DD-MM-YYYY'))
	l_log = pay_internal_log_write(formula_name||' - l_business_trav_end_dt '||TO_CHAR(l_business_trav_end_dt,'DD-MM-YYYY'))
	
	l_log = pay_internal_log_write(formula_name||' : LEAVE DAYS' || to_char(days_between( l_business_trav_end_dt, l_business_trav_st_dt) + 1))
	l_days = (days_between( l_business_trav_end_dt, l_business_trav_st_dt) + 1) + l_Onward_Extra_dys + l_Return_Extra_dys
	/*l_days = l_days -1*/
	l_log = pay_internal_log_write(formula_name||' Days after the addition of extra days '||TO_CHAR(l_days))

	 /** Condition for grade less than or equal to 1 or travelling with the executive staff **/
	 /*if (l_executive_staff ='Yes' or l_grade = '1' or l_grade = 'C') and (l_CAL_MODE = 'ALDAR') then*/
	 /*if (l_executive_staff ='Yes' or l_executive_staff ='Entity CEO' or l_executive_staff ='Group CEO' or l_grade = '1' or l_grade = 'C') and (l_CAL_MODE = 'ALDAR') then*/
	 if (l_executive_staff ='Yes' or l_executive_staff ='Entity CEO' or l_executive_staff ='Group CEO' or l_grade = 'C') and (l_CAL_MODE = 'ALDAR') then
	 (
		l_executive_grade_val  = TO_NUMBER(GET_TABLE_VALUE('ALDAR_BUSINESS_TRAVEL','BUSINESS_TRAVEL','C','0'))
		
		
	    
		l_additional_payment = (l_executive_grade_val - l_grade_value) * (80/100)
	 
	 )
	 
	 if (l_executive_staff ='Yes' or l_grade = 'U') and (l_CAL_MODE = 'C2I') then
	 (
		l_executive_grade_val  = TO_NUMBER(GET_TABLE_VALUE('C2i_BUSINESS_TRAVEL','Outside_UAE','U','0'))
		
		
	    
		l_additional_payment = (l_executive_grade_val - l_grade_value) * (80/100)
	 
	 )
	 l_log = pay_internal_log_write(formula_name||' l_additional_payment '||TO_CHAR(l_additional_payment))
	 
	l_payment = (l_days * l_grade_value) + (l_additional_payment * (l_days))
	
	if l_hotel_provided = 'Yes'  THEN
	(
		
		l_tot_earn =  l_payment*0.3 /* only 30% per of total pay*/
	 
	)
	ELSE
	(
		l_tot_earn = l_payment
		
	)


)


l_net_pay	= l_tot_earn + l_tot_ded

l_log = pay_internal_log_write(formula_name||': l_net_pay value: ' || to_char(l_net_pay))
l_log = pay_internal_log_write(formula_name||': l_tot_earn value: ' || to_char(l_tot_earn))

l_log = pay_internal_log_write(formula_name||': l_tot_ded value: ' || to_char(l_tot_ded))
l_log = pay_internal_log_write(formula_name||': l_abs_unit value: ' || to_char(l_abs_unit))
l_log = pay_internal_log_write(formula_name||' - end')
l_comments = formula_name

return l_comments, l_net_pay, l_tot_ded, l_tot_earn, l_days 
